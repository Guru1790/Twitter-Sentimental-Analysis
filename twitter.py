# -*- coding: utf-8 -*-
"""Twitter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBgrzOWG9ahNBYhU9Dflg0MZ0Z2b8oNC
"""

import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import re
import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Download necessary NLTK resources
nltk.download('stopwords')
nltk.download('punkt')

# Load dataset
data = pd.read_csv('/content/training_twitter_x_y_train.csv')

# Sample of the dataset (assuming the columns are named as shown in the problem statement)
print(data.head())

# Function to clean the text
def clean_text(text):
    # Remove URLs
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)
    # Remove user @ references and '#' from hashtags
    text = re.sub(r'\@\w+|\#','', text)
    # Tokenize the text
    words = word_tokenize(text)
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    filtered_words = [word for word in words if word.lower() not in stop_words]
    # Join the filtered words back into a single string
    return ' '.join(filtered_words)

# Apply the text cleaning function to the tweet text
data['clean_text'] = data['text'].apply(clean_text)

# Check the cleaned text
print(data[['text', 'clean_text']].head())

# Visualization: Distribution of sentiment counts
plt.figure(figsize=(8,6))
data['airline_sentiment'].value_counts().plot(kind='bar', color=['red', 'green', 'blue'])
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

# Visualization: Word cloud for positive sentiment
positive_tweets = data[data['airline_sentiment'] == 'positive']
positive_words = ' '.join(positive_tweets['clean_text'])
wordcloud = WordCloud(width=800, height=400, random_state=21, max_font_size=110).generate(positive_words)

plt.figure(figsize=(10,8))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.title('Word Cloud for Positive Sentiment Tweets')
plt.show()

# Visualization: Word cloud for negative sentiment
negative_tweets = data[data['airline_sentiment'] == 'negative']
negative_words = ' '.join(negative_tweets['clean_text'])
wordcloud = WordCloud(width=800, height=400, random_state=21, max_font_size=110).generate(negative_words)

plt.figure(figsize=(10,8))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.title('Word Cloud for Negative Sentiment Tweets')
plt.show()

